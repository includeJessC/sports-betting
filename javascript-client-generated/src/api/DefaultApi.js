/*
 * Sports betting
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.9
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BaseUserInfo} from '../model/BaseUserInfo';
import {Competition} from '../model/Competition';
import {CreateBetBody} from '../model/CreateBetBody';
import {CreateCompetitionBody} from '../model/CreateCompetitionBody';
import {CreateMatchBody} from '../model/CreateMatchBody';
import {ErrorResponse} from '../model/ErrorResponse';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {Match} from '../model/Match';
import {RegisterApprove} from '../model/RegisterApprove';
import {UserInfo} from '../model/UserInfo';
import {UserMeta} from '../model/UserMeta';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.9
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the competitionsGet operation.
     * @callback moduleapi/DefaultApi~competitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Получает все соревнования пользователя.
     * @param {String} id 
     * @param {module:api/DefaultApi~competitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    competitionsGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling competitionsGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/competitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the competitionsInfoGet operation.
     * @callback moduleapi/DefaultApi~competitionsInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Competition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отдает информаицю о соревновании для этого пользовтеля.
     * @param {String} competitionId 
     * @param {String} id 
     * @param {module:api/DefaultApi~competitionsInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    competitionsInfoGet(competitionId, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling competitionsInfoGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling competitionsInfoGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'competition_id': competitionId,'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Competition;

      return this.apiClient.callApi(
        '/competitions_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the competitionsInfoPost operation.
     * @callback moduleapi/DefaultApi~competitionsInfoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Competition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Добавляет пользователя в участие в соревнование.
     * @param {String} competitionId 
     * @param {String} id 
     * @param {module:api/DefaultApi~competitionsInfoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    competitionsInfoPost(competitionId, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'competitionId' is set
      if (competitionId === undefined || competitionId === null) {
        throw new Error("Missing the required parameter 'competitionId' when calling competitionsInfoPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling competitionsInfoPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'competition_id': competitionId,'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Competition;

      return this.apiClient.callApi(
        '/competitions_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createBetPost operation.
     * @callback moduleapi/DefaultApi~createBetPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Match{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Делает ставку.
     * @param {String} id 
     * @param {String} matchId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBetBody} opts.body 
     * @param {module:api/DefaultApi~createBetPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createBetPost(id, matchId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createBetPost");
      }
      // verify the required parameter 'matchId' is set
      if (matchId === undefined || matchId === null) {
        throw new Error("Missing the required parameter 'matchId' when calling createBetPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id,'match_id': matchId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Match;

      return this.apiClient.callApi(
        '/create/bet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createCompetitionPost operation.
     * @callback moduleapi/DefaultApi~createCompetitionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Competition{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создает новое соревнование.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCompetitionBody} opts.body 
     * @param {module:api/DefaultApi~createCompetitionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createCompetitionPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createCompetitionPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Competition;

      return this.apiClient.callApi(
        '/create/competition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createMatchPost operation.
     * @callback moduleapi/DefaultApi~createMatchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Match{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Создает новый матч.
     * @param {String} id 
     * @param {String} competionId 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMatchBody} opts.body 
     * @param {module:api/DefaultApi~createMatchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createMatchPost(id, competionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createMatchPost");
      }
      // verify the required parameter 'competionId' is set
      if (competionId === undefined || competionId === null) {
        throw new Error("Missing the required parameter 'competionId' when calling createMatchPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id,'competion_id': competionId
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Match;

      return this.apiClient.callApi(
        '/create/match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the matchInfoGet operation.
     * @callback moduleapi/DefaultApi~matchInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Match{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Отдает информаицю о матче для этого пользовтеля.
     * @param {String} matchId 
     * @param {String} id 
     * @param {module:api/DefaultApi~matchInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    matchInfoGet(matchId, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'matchId' is set
      if (matchId === undefined || matchId === null) {
        throw new Error("Missing the required parameter 'matchId' when calling matchInfoGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling matchInfoGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'match_id': matchId,'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Match;

      return this.apiClient.callApi(
        '/match_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userGet operation.
     * @callback moduleapi/DefaultApi~userGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Выдача информации о пользователе
     * @param {String} id 
     * @param {module:api/DefaultApi~userGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userGet(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserInfo;

      return this.apiClient.callApi(
        '/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userLoginPost operation.
     * @callback moduleapi/DefaultApi~userLoginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Залогинивает пользователя с заданными данными.
     * @param {Object} opts Optional parameters
     * @param {module:model/BaseUserInfo} opts.body 
     * @param {module:api/DefaultApi~userLoginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userLoginPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/user_login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userPut operation.
     * @callback moduleapi/DefaultApi~userPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Изменение информации о пользователе.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserMeta} opts.body 
     * @param {module:api/DefaultApi~userPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userPut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserInfo;

      return this.apiClient.callApi(
        '/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userRegisterApprovePost operation.
     * @callback moduleapi/DefaultApi~userRegisterApprovePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Подтверждает регистрацию пользователя (страница с вводом слова регистрации).
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisterApprove} opts.body 
     * @param {module:api/DefaultApi~userRegisterApprovePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    userRegisterApprovePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserInfo;

      return this.apiClient.callApi(
        '/user_register_approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the userRegisterPost operation.
     * @callback moduleapi/DefaultApi~userRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Регистрирует пользователя с заданными данными.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserInfo} opts.body 
     * @param {module:api/DefaultApi~userRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    userRegisterPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/user_register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
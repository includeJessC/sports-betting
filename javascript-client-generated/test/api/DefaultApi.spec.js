/*
 * Sports betting
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.9
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SportsBetting);
  }
}(this, function(expect, SportsBetting) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SportsBetting.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('competitionsGet', function() {
        it('should call competitionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for competitionsGet call and complete the assertions
          /*

          instance.competitionsGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.InlineResponse200);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('competitionsInfoGet', function() {
        it('should call competitionsInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for competitionsInfoGet call and complete the assertions
          /*

          instance.competitionsInfoGet(competitionId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.Competition);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('competitionsInfoPost', function() {
        it('should call competitionsInfoPost successfully', function(done) {
          // TODO: uncomment, update parameter values for competitionsInfoPost call and complete the assertions
          /*

          instance.competitionsInfoPost(competitionId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.Competition);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createBetPost', function() {
        it('should call createBetPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createBetPost call and complete the assertions
          /*
          var opts = {};

          instance.createBetPost(id, matchId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.Match);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCompetitionPost', function() {
        it('should call createCompetitionPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createCompetitionPost call and complete the assertions
          /*
          var opts = {};

          instance.createCompetitionPost(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.Competition);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createMatchPost', function() {
        it('should call createMatchPost successfully', function(done) {
          // TODO: uncomment, update parameter values for createMatchPost call and complete the assertions
          /*
          var opts = {};

          instance.createMatchPost(id, competionId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.Match);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('matchInfoGet', function() {
        it('should call matchInfoGet successfully', function(done) {
          // TODO: uncomment, update parameter values for matchInfoGet call and complete the assertions
          /*

          instance.matchInfoGet(matchId, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.Match);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGet', function() {
        it('should call userGet successfully', function(done) {
          // TODO: uncomment, update parameter values for userGet call and complete the assertions
          /*

          instance.userGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.UserInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userLoginPost', function() {
        it('should call userLoginPost successfully', function(done) {
          // TODO: uncomment, update parameter values for userLoginPost call and complete the assertions
          /*
          var opts = {};

          instance.userLoginPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userPut', function() {
        it('should call userPut successfully', function(done) {
          // TODO: uncomment, update parameter values for userPut call and complete the assertions
          /*
          var opts = {};

          instance.userPut(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.UserInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userRegisterApprovePost', function() {
        it('should call userRegisterApprovePost successfully', function(done) {
          // TODO: uncomment, update parameter values for userRegisterApprovePost call and complete the assertions
          /*
          var opts = {};

          instance.userRegisterApprovePost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SportsBetting.UserInfo);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userRegisterPost', function() {
        it('should call userRegisterPost successfully', function(done) {
          // TODO: uncomment, update parameter values for userRegisterPost call
          /*
          var opts = {};

          instance.userRegisterPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));

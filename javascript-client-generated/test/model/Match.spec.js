/*
 * Sports betting
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.9
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SportsBetting);
  }
}(this, function(expect, SportsBetting) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Match', function() {
      beforeEach(function() {
        instance = new SportsBetting.Match();
      });

      it('should create an instance of Match', function() {
        // TODO: update the code to test Match
        expect(instance).to.be.a(SportsBetting.Match);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property firstTeamName (base name: "first_team_name")', function() {
        // TODO: update the code to test the property firstTeamName
        expect(instance).to.have.property('firstTeamName');
        // expect(instance.firstTeamName).to.be(expectedValueLiteral);
      });

      it('should have the property secondTeamName (base name: "second_team_name")', function() {
        // TODO: update the code to test the property secondTeamName
        expect(instance).to.have.property('secondTeamName');
        // expect(instance.secondTeamName).to.be(expectedValueLiteral);
      });

      it('should have the property firstTeamResult (base name: "first_team_result")', function() {
        // TODO: update the code to test the property firstTeamResult
        expect(instance).to.have.property('firstTeamResult');
        // expect(instance.firstTeamResult).to.be(expectedValueLiteral);
      });

      it('should have the property secondTeamResult (base name: "second_team_result")', function() {
        // TODO: update the code to test the property secondTeamResult
        expect(instance).to.have.property('secondTeamResult');
        // expect(instance.secondTeamResult).to.be(expectedValueLiteral);
      });

      it('should have the property isActive (base name: "is_active")', function() {
        // TODO: update the code to test the property isActive
        expect(instance).to.have.property('isActive');
        // expect(instance.isActive).to.be(expectedValueLiteral);
      });

      it('should have the property betsResult (base name: "bets_result")', function() {
        // TODO: update the code to test the property betsResult
        expect(instance).to.have.property('betsResult');
        // expect(instance.betsResult).to.be(expectedValueLiteral);
      });

      it('should have the property userBets (base name: "user_bets")', function() {
        // TODO: update the code to test the property userBets
        expect(instance).to.have.property('userBets');
        // expect(instance.userBets).to.be(expectedValueLiteral);
      });

    });
  });

}));

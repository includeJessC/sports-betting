# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.bets_result import BetsResult  # noqa: F401,E501
from swagger_server.models.match import Match  # noqa: F401,E501
from swagger_server import util


class Competition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, id: int=None, is_active: bool=None, matches: List[Match]=None, leader_board: List[BetsResult]=None):  # noqa: E501
        """Competition - a model defined in Swagger

        :param name: The name of this Competition.  # noqa: E501
        :type name: str
        :param id: The id of this Competition.  # noqa: E501
        :type id: int
        :param is_active: The is_active of this Competition.  # noqa: E501
        :type is_active: bool
        :param matches: The matches of this Competition.  # noqa: E501
        :type matches: List[Match]
        :param leader_board: The leader_board of this Competition.  # noqa: E501
        :type leader_board: List[BetsResult]
        """
        self.swagger_types = {
            'name': str,
            'id': int,
            'is_active': bool,
            'matches': List[Match],
            'leader_board': List[BetsResult]
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'is_active': 'is_active',
            'matches': 'matches',
            'leader_board': 'leader_board'
        }
        self._name = name
        self._id = id
        self._is_active = is_active
        self._matches = matches
        self._leader_board = leader_board

    @classmethod
    def from_dict(cls, dikt) -> 'Competition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Competition of this Competition.  # noqa: E501
        :rtype: Competition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Competition.


        :return: The name of this Competition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Competition.


        :param name: The name of this Competition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self) -> int:
        """Gets the id of this Competition.


        :return: The id of this Competition.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Competition.


        :param id: The id of this Competition.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Competition.


        :return: The is_active of this Competition.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Competition.


        :param is_active: The is_active of this Competition.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def matches(self) -> List[Match]:
        """Gets the matches of this Competition.


        :return: The matches of this Competition.
        :rtype: List[Match]
        """
        return self._matches

    @matches.setter
    def matches(self, matches: List[Match]):
        """Sets the matches of this Competition.


        :param matches: The matches of this Competition.
        :type matches: List[Match]
        """
        if matches is None:
            raise ValueError("Invalid value for `matches`, must not be `None`")  # noqa: E501

        self._matches = matches

    @property
    def leader_board(self) -> List[BetsResult]:
        """Gets the leader_board of this Competition.


        :return: The leader_board of this Competition.
        :rtype: List[BetsResult]
        """
        return self._leader_board

    @leader_board.setter
    def leader_board(self, leader_board: List[BetsResult]):
        """Sets the leader_board of this Competition.


        :param leader_board: The leader_board of this Competition.
        :type leader_board: List[BetsResult]
        """

        self._leader_board = leader_board

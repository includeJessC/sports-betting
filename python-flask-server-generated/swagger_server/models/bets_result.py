# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.bets import Bets  # noqa: F401,E501
from swagger_server import util


class BetsResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, result: float=None, bets: List[Bets]=None):  # noqa: E501
        """BetsResult - a model defined in Swagger

        :param user_id: The user_id of this BetsResult.  # noqa: E501
        :type user_id: str
        :param result: The result of this BetsResult.  # noqa: E501
        :type result: float
        :param bets: The bets of this BetsResult.  # noqa: E501
        :type bets: List[Bets]
        """
        self.swagger_types = {
            'user_id': str,
            'result': float,
            'bets': List[Bets]
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'result': 'result',
            'bets': 'bets'
        }
        self._user_id = user_id
        self._result = result
        self._bets = bets

    @classmethod
    def from_dict(cls, dikt) -> 'BetsResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BetsResult of this BetsResult.  # noqa: E501
        :rtype: BetsResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this BetsResult.


        :return: The user_id of this BetsResult.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this BetsResult.


        :param user_id: The user_id of this BetsResult.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def result(self) -> float:
        """Gets the result of this BetsResult.


        :return: The result of this BetsResult.
        :rtype: float
        """
        return self._result

    @result.setter
    def result(self, result: float):
        """Sets the result of this BetsResult.


        :param result: The result of this BetsResult.
        :type result: float
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def bets(self) -> List[Bets]:
        """Gets the bets of this BetsResult.


        :return: The bets of this BetsResult.
        :rtype: List[Bets]
        """
        return self._bets

    @bets.setter
    def bets(self, bets: List[Bets]):
        """Sets the bets of this BetsResult.


        :param bets: The bets of this BetsResult.
        :type bets: List[Bets]
        """

        self._bets = bets

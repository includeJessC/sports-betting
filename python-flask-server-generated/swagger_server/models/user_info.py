# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.user_meta import UserMeta  # noqa: F401,E501
from swagger_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_meta: UserMeta=None, id: str=None):  # noqa: E501
        """UserInfo - a model defined in Swagger

        :param user_meta: The user_meta of this UserInfo.  # noqa: E501
        :type user_meta: UserMeta
        :param id: The id of this UserInfo.  # noqa: E501
        :type id: str
        """
        self.swagger_types = {
            'user_meta': UserMeta,
            'id': str
        }

        self.attribute_map = {
            'user_meta': 'user_meta',
            'id': 'id'
        }
        self._user_meta = user_meta
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfo of this UserInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_meta(self) -> UserMeta:
        """Gets the user_meta of this UserInfo.


        :return: The user_meta of this UserInfo.
        :rtype: UserMeta
        """
        return self._user_meta

    @user_meta.setter
    def user_meta(self, user_meta: UserMeta):
        """Sets the user_meta of this UserInfo.


        :param user_meta: The user_meta of this UserInfo.
        :type user_meta: UserMeta
        """
        if user_meta is None:
            raise ValueError("Invalid value for `user_meta`, must not be `None`")  # noqa: E501

        self._user_meta = user_meta

    @property
    def id(self) -> str:
        """Gets the id of this UserInfo.


        :return: The id of this UserInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserInfo.


        :param id: The id of this UserInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

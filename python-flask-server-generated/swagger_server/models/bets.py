# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Bets(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, bet: int=None, bet_profit: float=None):  # noqa: E501
        """Bets - a model defined in Swagger

        :param name: The name of this Bets.  # noqa: E501
        :type name: str
        :param bet: The bet of this Bets.  # noqa: E501
        :type bet: int
        :param bet_profit: The bet_profit of this Bets.  # noqa: E501
        :type bet_profit: float
        """
        self.swagger_types = {
            'name': str,
            'bet': int,
            'bet_profit': float
        }

        self.attribute_map = {
            'name': 'name',
            'bet': 'bet',
            'bet_profit': 'bet_profit'
        }
        self._name = name
        self._bet = bet
        self._bet_profit = bet_profit

    @classmethod
    def from_dict(cls, dikt) -> 'Bets':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bets of this Bets.  # noqa: E501
        :rtype: Bets
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Bets.


        :return: The name of this Bets.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Bets.


        :param name: The name of this Bets.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bet(self) -> int:
        """Gets the bet of this Bets.


        :return: The bet of this Bets.
        :rtype: int
        """
        return self._bet

    @bet.setter
    def bet(self, bet: int):
        """Sets the bet of this Bets.


        :param bet: The bet of this Bets.
        :type bet: int
        """
        if bet is None:
            raise ValueError("Invalid value for `bet`, must not be `None`")  # noqa: E501

        self._bet = bet

    @property
    def bet_profit(self) -> float:
        """Gets the bet_profit of this Bets.


        :return: The bet_profit of this Bets.
        :rtype: float
        """
        return self._bet_profit

    @bet_profit.setter
    def bet_profit(self, bet_profit: float):
        """Sets the bet_profit of this Bets.


        :param bet_profit: The bet_profit of this Bets.
        :type bet_profit: float
        """

        self._bet_profit = bet_profit
